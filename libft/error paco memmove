ft_memmove:    [CRASH] [CRASH] [CRASH] [CRASH] [CRASH] [OK] [CRASH] [CRASH] [OK] [OK] [OK] [OK] [CRASH] [CRASH] 
[crash]: your memmove does not work with basic input
Test code:
	char *src = "this is a good nyancat !\r\n";
	char dst1[0xF0];
	char dst2[0xF0];
	int size = strlen(src);

	__builtin___memmove_chk (dst1, src, size, __builtin_object_size (dst1, 0));
	ft_memmove(dst2, src, size);
	if (!memcmp(dst1, dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memmove's return is false/does not work with basic input
Test code:
	char *src = "thanks to @apellicc for this test !\r\n";
	char dst1[0xF0];
	int size = strlen(src);
	char *r1 = __builtin___memmove_chk (dst1, src, size, __builtin_object_size (dst1, 0));
	char *r2 = ft_memmove(dst1, src, size);

	if (r1 != r2)
		exit(TEST_FAILED);
	r1 = __builtin___memmove_chk ("", "" - 1, 0, __builtin_object_size ("", 0));
	r2 = ft_memmove("", "" - 1, 0);
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);


[crash]: your memmove does not work with \0 and others unsigned char codes
Test code:
	char *src = "thi\xffs i\xfas \0a g\xde\xadood \0nyan\0cat\0 !\r\n";
	int size = 33;
	char dst1[0xF0];
	char dst2[0xF0];

	__builtin___memmove_chk (dst1, src, size, __builtin_object_size (dst1, 0));
	ft_memmove(dst2, src, size);
	if (!memcmp(dst1, dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memmove does not work with integers copy
Test code:
	unsigned long src = 0xdeadbeef;
	int size = sizeof(src);

	unsigned long dst1;
	unsigned long dst2;
	__builtin___memmove_chk (&dst1, &src, size, __builtin_object_size (&dst1, 0));
	ft_memmove(&dst2, &src, size);
	if (!memcmp(&dst1, &dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memmove does not support the overlap (test 1)
Test code:
	char dst1[0xF0];
	char dst2[0xF0];
	char *data = "thiß ß\xde\xad\xbe\xeftriñg will be øvérlapéd !\r\n";
	int size = 0xF0 - 0xF;

	__builtin___memset_chk (dst1, 'A', sizeof(dst1), __builtin_object_size (dst1, 0));
	__builtin___memset_chk (dst2, 'A', sizeof(dst2), __builtin_object_size (dst2, 0));
	__builtin___memcpy_chk (dst1, data, strlen(data), __builtin_object_size (dst1, 0));
	__builtin___memcpy_chk (dst2, data, strlen(data), __builtin_object_size (dst2, 0));
	__builtin___memmove_chk (dst1 + 3, dst1, size, __builtin_object_size (dst1 + 3, 0));
	ft_memmove(dst2 + 3, dst2, size);
	if (!memcmp(dst1, dst2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memmove does not support the overlap
Test code:
	char data1[] = "the cake is a lie !\0I'm hidden lol\r\n";
	char data2[] = "the cake is a lie !\0I'm hidden lol\r\n";
	int size = strlen("the cake is a lie !\0I'm hidden lol\r\n");

	__builtin___memmove_chk (data1, data1, size, __builtin_object_size (data1, 0));
	ft_memmove(data2, data2, size);
	if (!memcmp(data1, data2, size))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memmove does not work with a 128Mo data input !
Test code:
	int size = 128 * 1024 * 1024;
	char *dst = (char *)malloc(sizeof(char) * size);
	char *data = (char *)malloc(sizeof(char) * size);

	__builtin___memset_chk (data, 'A', size, __builtin_object_size (data, 0));
	if (!dst)
		exit(TEST_INVISIBLE);
	ft_memmove(dst, data, size);
	exit(TEST_SUCCESS);


[crash]: your memmove does not well with NULL as both parameters and size
Test code:
	ft_memmove(((void *)0), ((void *)0), 5);


[crash]: your memmove use malloc ? why ?
Test code:
	char *src = "the cake is a lie !\0I'm hidden lol\r\n";
	char buff[0xF0];

	char *ret = ft_memmove(buff, src, 100);
	if (ret == ((void *)0))
	{
		exit(TEST_FAILED);
	}
	exit(TEST_SUCCESS);

Errors in memmove: /Users/prmarott/francinette/temp/libft/war-machine/tests/Part1_functions/ft_memmove
Test 1:
    if (dest != ft_memmove(dest, "consectetur", 5))
        write(1, "dest's adress was not returned\n", 31);
    write(1, dest, 22);
Expected (cat -e test01.output):
conseipsum dolor sit a
Your result (cat -e user_output_test01):

Test 2:
    if (dest != ft_memmove(dest, "con\0sec\0\0te\0tur", 10))
        write(1, "dest's adress was not returned\n", 31);
    write(1, dest, 22);
Expected (cat -e test02.output):
con^@sec^@^@t dolor sit a
Your result (cat -e user_output_test02):

Test 3:
    if (dest != ft_memmove(dest, src, 8))
        write(1, "dest's adress was not returned\n", 31);
    write(1, dest, 22);
Expected (cat -e test03.output):
lorem ipum dolor sit a
Your result (cat -e user_output_test03):

[crash]: your memmove does not work with basic input
[crash]: your memmove's return is false/does not work with basic input
[crash]: your memmove does not work with \0 and others unsigned char codes
[crash]: your memmove does not work with integers copy
[crash]: your memmove does not support the overlap (test 1)
[crash]: your memmove does not support the overlap
[crash]: your memmove does not work with a 128Mo data input !
[crash]: your memmove does not well with NULL as both parameters and size
[crash]: your memmove use malloc ? why ?
