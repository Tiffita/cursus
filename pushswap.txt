
https://stackoverflow.com/questions/1591361/understanding-typedefs-for-function-pointers-in-c
https://stackoverflow.com/questions/71821060/typedef-in-c-how-it-works-when-it-takes-2-arguments?rq=3

https://conclase.net/c/orden/quicksort

https://es.wikipedia.org/wiki/An%C3%A1lisis_de_algoritmos

https://www.uco.es/grupos/eatco/informatica/metodologia/cadenasyarrays.pdf
----------------------------------------
 		INSTRUCCIONES SUBJECT:
STACK A

STACK B

Recibir Arg 
Ordenar Arg en STACK A de menor a mayor, 1er nº menor en la cima.

Condiciones para STACK A: nº positivos/negativos, nunca duplicados

Recepción de Arg: 1er Arg, 1ero en STACK A, y asi..

Las instrucciones deben separarse utilizando un “\n”

En caso de error, deberá mostrar Error seguido de un “\n”
Si no se especifican parámetros, el programa no deberá mostrar nada (" ")

--------------------------------------------


Recibir Arg y separarlos:

- Recibir string 
			- Revisar doc sobre recepción argumentos en listas o recibir Arg y pasarlo a listas,  			typedefs for function pointers in C(?))

- Diferenciar posibles nº en String
	- Casos validos: 555 34 24
			"4 67 3 87 23" 2 34 53 
			"4 67 3 87 23"
				- Manejar espacios entre nº
				- Manejar distintos Arg
				- Manejar Arg entero
					- Separar los nº de un Arg entero por 							 		  espacios
- Casos no validos: 0 one 2 3
		    "23, 234, 2323"			
		    " "		
		    - Manejar errores o vacíos, dar mensaje error
- Transformar string en nº int: Parsing, parseo
- Colocar en STACK A.
- Programar los Movimientos:(Revisar doc listas y movimientos de nodos)
•	sa : swap a - intercambia los dos primeros elementos encima del stack a. No hace
		nada si hay uno o menos elementos.
•	sb : swap b - intercambia los dos primeros elementos encima del stack b. No hace
		nada si hay uno o menos elementos.
•	ss : swap a y swap b a la vez.
•	pa : push a - toma el primer elemento del stack b y lo pone encima del stack a.
		No hace nada si b está vacío.
•	pb : push b - toma el primer elemento del stack a y lo pone encima del stack b.
		No hace nada si a está vacío.
•	ra : rotate a - desplaza hacia arriba todos los elementos del stack a una posición,
		de forma que el primer elemento se convierte en el último.
•	rb : rotate b - desplaza hacia arriba todos los elementos del stack b una posición,
		de forma que el primer elemento se convierte en el último.
•	rr : rotate a y rotate b - desplaza al mismo tiempo todos los elementos del stack
		a y del stack b una posición hacia arriba, de forma que el primer elemento se
		convierte en el último.
•	rra : reverse rotate a - desplaza hacia abajo todos los elementos del stack a una
		posición, de forma que el último elemento se convierte en el primero.
•	rrb : reverse rotate b - desplaza hacia abajo todos los elementos del stack b una
		posición, de forma que el último elemento se convierte en el primero.
•	rrr : reverse rotate a y reverse rotate b - desplaza al mismo tiempo todos
		los elementos del stack a y del stack b una posición hacia abajo, de forma que
		el último elemento se convierte en el primero.
			- Opciones de prog: Una función para cada movimiento ?

- Programar el algoritmo de ordenación con esos movimientos
	- Revisar doc sobre algoritmos de ordenación complejos
- Hacer makefile añadiendo Libft(ft_split, ft_itoa, ft_atoi), agregar mi ft_printf
- Reestricciones:
•	Ordenar 3 valores: no más de 3 acciones.
•	Ordenar 5 valores: no más de 12 acciones.
•	Ordenar 100 valores (asignando puntos en función del numero de movimientos):
•	5 puntos por menos de 700 acciones.
•	4 puntos por menos de 900 acciones.
•	3 puntos por menos de 1.100 acciones.
•	2 puntos por menos de 1.300 acciones.
•	1 puntos por menos de 1.500 acciones.
•	Ordenar 500 valores (asignando puntos en función del numero de movimientos):
•	5 puntos por menos de  5.500 acciones.
•	4 puntos por menos de  7.000 acciones.
•	3 puntos por menos de  8.500 acciones.
•	2 puntos por menos de  10.000 acciones.
•	1 puntos por menos de  11.500 acciones.

EVALUACION: Manejo de errores.
- Ejecute el comprobador con parámetros no numéricos. El programa debe mostrar "Error".
- Ejecutar el verificador con un parámetro numérico duplicado. El programa debe mostrar "Error".
- Ejecutar el verificador sólo con parámetros numéricos incluyendo uno mayor que MAXINT. El programa debe mostrar "Error".
- Ejecutar el verificador sin ningún parámetro. El programa no debe mostrar nada y devolver el prompt.
- Ejecute el verificador con parámetros válidos y escriba una acción que no exista durante la fase de instrucción. El programa debe mostrar "Error".
- Ejecute el verificador con parámetros válidos y escriba una acción con uno o varios espacios antes y/o después de la acción durante la fase de instrucción. El programa debe mostrar "Error".








