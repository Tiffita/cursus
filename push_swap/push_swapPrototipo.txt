#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <limits.h> necesitos numeros min y max

// definir listas, revisar listas dobles ?
typedef struct Node {
    int data;
    struct Node *next;
} Node;

// prototipos ( ver bien despues)
Node *createNode(int value);
void push(Node **top, int value);
int pop(Node **top);
int isEmpty(Node *top);
void freeStack(Node **top);
void split(char *input, Node **top) // modificar split , const char ?)
void printOperations(int *operations, int count);

// hacer instrucciones combinarlas con un ft_printf 
void swap(Node **stack);
void rotate(Node **stack);
void reverseRotate(Node **stack);
void pushAtoB(Node **stack_a, Node **stack_b);


// Manejo de errores: check si  av es < 2
// check is es == 2, seria una string con "", usar ft_split y enviar arguemntos a la lista
// Si es > a 2, es una lista de argumentos, usar ft_atoi y enviar a la lista para crear nodos.
// hacer funcion para check duplicados, hacerla antes de recibir argumentos o despues y checkear los nodos?

// parseo (usa FUNCION PARSEO DE STRING y FUNCION PARA LISTA DE ARGUMENTOS )
t_stack	*ft_parseo(int argc, char **argv)


//funcion para checkear errores(usa ft_isalpha, ft_error, ft_check_error)

int	check_args(char **argv)


// funcion para checkear errores (usa ft_isdigit, ft_isspace y ft_sign)
int	ft_check_error(char **argv, int i, int j)


// funcion ft_sign
int	ft_sign(int c)

//funcion ft_isspace
int	ft_isspace(int c)

//funcion de error mensaje:

// Funcion Main (usa ft_printf, ft_split(revisar), falta funcion que llame algoritmo, una funcion check ordenado(?), print_operations y los free + free_stack)
int main(int argc, char *argv[])

// Funcion crear nuevo nodo
Node *create_node(int data, int range) 

// Funcion pushear un nodo al stack
void push(Node **top, int value) 


// popear un nodo del stack (usa is_empty y ft_printf)
int pop(Node **top)


// Funcion ver si el stack esta vacio
int is_empty(Node *top)


// hacer free del stack (usa is_empty)
void freeStack(Node **top)

// FUNCION PARA RECIBIR LISTA DE ARGUMENTOS, arguments_list (usa ft_add_back, ft_create_node y ft_atoi)
void	arguments_list(char **argv, t_stack **stack_a)

// split para recibir los argv (usa ft_split, ft_atoi, push)
void new_split(char *input, Node **top)

// ft_printf de las instrucciones (usa ft_printf)
void printperations(int *operations, int count)
   
// instrucciones
void swap(Node **stack) {
    
}

void rotate(Node **stack) {
   
}

void reverseRotate(Node **stack) {
    
}

void pushAtoB(Node **stack_a, Node **stack_b) {
   
}