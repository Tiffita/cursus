Estructura t_stack:
Define una estructura que representa un elemento de la pila.
Contiene campos como value (valor del elemento), index (índice del elemento),
pos (posición actual en la pila), target (posición objetivo en la pila),
cost_a (costo asociado al elemento en la pila A) y cost_b (costo asociado al elemento en la pila B).

main.c :
función push_swap que realiza la ordenación de la pila.
Esta función toma como argumentos dos punteros a pilas (stack_a y stack_b) y
el tamaño de la pila inicial (stack_size).
La función utiliza diferentes estrategias de ordenación dependiendo del tamaño de la pila.
Por ejemplo, si la pila tiene dos elementos y no está ordenada, se realiza un intercambio (sa).
Si la pila tiene tres elementos, se utiliza un algoritmo especial para ordenarlos.
Para pilas de tamaño mayor a tres, se utiliza un algoritmo más complejo definido en la
función do_sort.

La función main es el punto de entrada del programa.
Comienza definiendo dos punteros a pilas stack_a y stack_b y variables adicionales stack_size e i.
Utiliza un bucle while para recorrer los argumentos de línea de comandos (av) y
parsearlos como enteros, agregándolos a la pila stack_a utilizando la función parsing.
Después de haber parseado todos los argumentos, verifica si hay duplicados en la pila
utilizando la función check_is_dup. Si se encuentra un duplicado, muestra un mensaje de error
y libera la memoria antes de salir del programa.
Luego, calcula el tamaño de la pila (stack_size) y asigna un índice a cada elemento
de la pila utilizando la función get_index.
Finalmente, llama a la función push_swap para ordenar la pila stack_a utilizando
la pila auxiliar stack_b. Una vez ordenada la pila, libera la memoria asignada a ambas pilas y
devuelve 0 para indicar que el programa se ejecutó correctamente.

parsing.c:
función parsing, que toma un argumento de tipo char * que representa un argumento de línea de
comandos y un puntero a puntero a t_stack llamado stack_a. Esta función divide el argumento en
tokens utilizando el espacio como delimitador y luego convierte cada token en un número entero
utilizando la función ft_atoi. Si el número está dentro del rango de INT_MIN y INT_MAX, se añade
a la pila stack_a utilizando la función stack_add. Si no se cumple esta condición, se muestra un
error utilizando la función error_show.
Define la función check_input, que verifica si una cadena dada es un número válido.
Comprueba si la cadena comienza con un signo - o +, y si lo hace, se mueve al siguiente carácter.
Luego, verifica si todos los caracteres restantes son dígitos del 0 al 9. Si se encuentra un
carácter que no sea un dígito, devuelve 0; de lo contrario, devuelve 1.

stack_operations.c:
get_bottom: Esta función recorre la pila hasta encontrar el último elemento y lo devuelve.
Si la pila está vacía o tiene solo un elemento, devuelve el mismo elemento.

stack_add: Esta función agrega un nuevo elemento a la pila. Si la pila está vacía, el nuevo
elemento se convierte en el primer elemento de la pila. Si la pila no está vacía, se busca el
último elemento de la pila y se agrega el nuevo elemento después de él.

check_bottom: Esta función es similar a get_bottom, pero devuelve el penúltimo elemento de la
pila en lugar del último. Se utiliza para verificar si la pila tiene solo dos elementos.

stack_new: Esta función crea un nuevo nodo de la pila con el valor especificado.
Asigna memoria para el nuevo nodo, inicializa sus campos y lo devuelve.

for_size_and_index.c:
get_index: Esta función asigna índices únicos a los elementos de la pila en función de sus valores.
Recorre la pila y busca el elemento con el valor más grande que aún no tiene un índice asignado.
Luego, asigna un índice único a ese elemento y repite el proceso hasta que todos los elementos
tengan un índice asignado. El índice se asigna en orden descendente, es decir, - el elemento con
el valor más grande recibe el índice más grande.-

get_size: Esta función devuelve el tamaño de la pila, es decir, el número de elementos que contiene.
Recorre la pila y cuenta el número de elementos hasta que llega al final.
Luego devuelve el tamaño calculado.

sorting1.c:
check_sorted: Esta función verifica si la pila está ordenada en orden ascendente.
Recorre la pila y compara cada elemento con su siguiente.
Si encuentra un elemento mayor que su siguiente, devuelve 0, indicando que la pila no está ordenada.
Si no encuentra ningún elemento que incumpla esta condición, devuelve 1, indicando que la pila
está ordenada.

do_sort_three: Esta función ordena los tres elementos superiores de la pila.
Comienza verificando si la pila ya está ordenada; si es así, no se realizan operaciones adicionales.
Si no está ordenada, busca el índice más grande entre los tres elementos y luego realiza las
operaciones necesarias (ra, rra y sa) para colocar el elemento con el índice más grande en la
parte superior de la pila y, finalmente, realiza un intercambio si es necesario.

sorting2.c:
push_init: Esta función se encarga de empujar los elementos del stack A al stack B inicialmente,
considerando la posición de los índices. Primero, verifica si la mitad de los elementos del stack A
ya están en el stack B o no. Si no lo están, los empuja al stack B; de lo contrario, rota el stack A.
Luego, empuja el resto de los elementos del stack A al stack B.
Cuando el índice del elemento actual supera la mitad del tamaño del stack A,
significa que la mayoría de los elementos con índices menores ya han sido empujados al stack B
y que los elementos restantes en el stack A están en posiciones que no son tan ventajosas para ser
empujados al stack B.
--Aclaracion: Si el tamaño de la pila A es mayor que 6, push_init mueve todos los elementos
excepto los últimos 3 a la pila B. Esto se logra pasando primero los elementos que están más
cerca del principio de la pila A, ya que se consideran menos útiles en el proceso de ordenamiento
inicial--

sort_stack: Esta función ordena el stack A de acuerdo con la posición del índice más bajo.
--Para poner arriba de todo el Stack A, el nodo con indice/valor mas bajo.--
Si el índice más bajo está en la mitad superior del stack, realiza rotaciones hacia la izquierda (ra)
para colocarlo al principio; de lo contrario, realiza rotaciones hacia la derecha (rra)
para colocarlo al principio.

do_sort: Esta función coordina todo el proceso de ordenamiento. Primero, empuja los elementos
del stack A al stack B usando push_init. -(los de indices menores a la mitad del stack A)- Luego,
ordena los tres primeros elementos restantes en el stack A utilizando do_sort_three.
Después, mientras el stack B no esté vacío, se encarga de calcular los costos, seleccionar el
movimiento más barato y ejecutarlo utilizando varias funciones auxiliares.
Finalmente, si el stack A no está completamente ordenado después de vaciar el stack B, se ordena
utilizando sort_stack.

--aclaracion en do_sort: Cuando se llama a la función sort_stack con stack_a como argumento,
la función opera sobre el mismo stack_a que se ha modificado anteriormente en el bucle
while (*stack_b). Cualquier modificación realizada en stack_a antes de llamar a sort_stack
se reflejará en la versión de stack_a que la función recibe como argumento.
Esto es porque en C, los argumentos de las funciones se pasan por valor,
lo que significa que se pasa una copia del valor del puntero al stack, no una copia del stack en sí.
Por lo tanto, cualquier modificación realizada en el stack a través del puntero afectará
al stack original.--

algo_index_and_target_for_cost.c:
get_position: Esta función asigna una posición (pos) a cada elemento en el stack.
Recorre el stack y asigna un valor incremental a la posición de cada elemento.

get_target: Esta función busca el objetivo (target) más cercano en el stack stack_a para
un elemento del stack stack_b. Compara los índices de los elementos en stack_a con el índice
del elemento actual en stack_b. Si encuentra un índice mayor que el índice del elemento en
stack_b y menor que el índice objetivo actual, actualiza el índice objetivo y la posición objetivo.
Si no encuentra un objetivo en ese rango, busca el índice y la posición más bajos entre los
elementos en stack_a.
--Aclaracion: el index fue anteriormente asignado a cada nodo del stack A por get_index que
luego los nodos fueron pusheados al stack B.--

check_lowest_index: Esta función encuentra la posición más baja (lowest_p) en el stack `stack`
en función de los índices de los elementos. Primero asigna posiciones a todos los elementos del
stack utilizando get_position, luego recorre el stack para encontrar el elemento con el índice más
bajo y devuelve su posición.
--Aclaracion: te da la posicion del nodo con indice mas bajo--

give_target_position: Esta función asigna objetivos (targets) a cada elemento en el stack stack_b
en función de los elementos en el stack stack_a. Utiliza la función get_target para encontrar el
objetivo más cercano para cada elemento en stack_b y lo asigna como su objetivo.

algo_calculate_costs.c:
función cost, se calculan los costos de cada elemento en el stack B.
Para cada elemento en el stack B, se calcula el costo de moverlo hacia arriba (cost_b) y
hacia el stack A (cost_a). Estos costos se determinan en función de la posición del elemento en su
respectivo stack. Si la posición es mayor que la mitad del tamaño del stack, se asigna un costo
negativo, lo que indica que es más eficiente moverlo en la dirección opuesta.
Esto se hace para ambos stacks, B y A.
--Aclaracion: Si la posición objetivo está en la primera mitad del stack A o B,
el costo es simplemente la distancia hasta esa posición. Si la posición objetivo está
en la segunda mitad del stack A o B, el costo se negativiza, lo que significa que mover el
elemento hacia allí será más costoso.--

En la función check_cheapest_move, se busca el movimiento más económico entre los elementos
del stack B. Se itera sobre todos los elementos del stack B y se calcula el costo total de mover
cada elemento (cost_a + cost_b). Se elige el movimiento con el costo total más bajo y se realiza
utilizando la función do_move.
--Aclaracion: Al establecer cheapest inicialmente en INT_MAX, se asegura que cualquier
valor menor encontrado durante el proceso de cálculo de costos se convierta en el nuevo
costo más económico registrado hasta ese punto en la iteración--

---Aqui, do_sort se esta ejecutando su bucle while, donde recorre todo el stack B, va haciendo
give_target_position, evalua el cost, ejecuta check_cheapest_move donde esta funcion hace do_move
hasta recorrer el bucle while del do_sort.
Si sigue sin estar ordenado una vez que se recorrio todo el stack B, se ejecuta sort_stack dentro de
do_sort hasta que termine.---

algo_moves_cost.c:
reverse_a_b: Esta función se encarga de realizar movimientos reversos en los stacks A y B
cuando ambos costos son negativos. Itera haciendo rotaciones inversas dobles (do_rrr) mientras
los costos sean negativos, decrementando ambos costos en cada iteración.

rotate_a_b: Similar a reverse_a_b, esta función realiza rotaciones dobles (do_rr) en los
stacks A y B cuando ambos costos son positivos. Itera haciendo rotaciones dobles mientras
ambos costos sean positivos, decrementando ambos costos en cada iteración.

rotate_a: Esta función realiza rotaciones simples (do_ra o do_rra) en el stack A según el valor
del costo. Si el costo es positivo, realiza rotaciones hacia arriba (do_ra) mientras reduce el costo.
Si el costo es negativo, realiza rotaciones hacia abajo (do_rra) mientras aumenta el costo.

rotate_b: Similar a rotate_a, pero para el stack B. Realiza rotaciones simples (do_rb o do_rrb)
en el stack B según el valor del costo. Si el costo es positivo, realiza rotaciones hacia arriba
(do_rb) mientras reduce el costo. Si el costo es negativo, realiza rotaciones hacia abajo (do_rrb)
mientras aumenta el costo.

do_move: Esta función coordina los movimientos en ambos stacks, determinando qué tipo de
movimiento debe realizar en base a los costos proporcionados.
Si ambos costos son negativos, llama a reverse_a_b. Si ambos costos son positivos,
llama a rotate_a_b. Luego, realiza las rotaciones en los stacks A y B individualmente de
acuerdo con los costos restantes y finalmente realiza la operación de push (do_pa) para mover
un elemento de B a A.
--Aclaracion: Los costos negativos sucedian si el objetivo se encontraba en la segunda
mitad de un Stack y los positivos en la primera mitad, y para hacer menos movimientos, si ambos costos
son negativos o positivos, se aprovechan los movimientos rrr y rr--

--Aqui ya do_move se habra ejecutado hasta recorrer todo stack B por el bucle while del do_sort, siendo
que lo ultimo que quedaba ordenar quizas es el nodo de menor valor, y con sort_stack, este se pone
arriba de todo y ya estaria todo ordenado.--

-- FALTA VER COMO FUNCIONAN LOS NODE OPERATIONS -- Y LOS FREE--

--  CUANDO EL ULTIMO IF !NOT SORTED DE DO_SORT YA ES POSITIVO, termina la funcion push swap--
se liberan los stacks A y B, y fin :D




