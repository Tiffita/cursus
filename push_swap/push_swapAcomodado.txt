#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>

typedef struct Node {
    int data;
    int range;  // Rango del nodo
    struct Node *next;
    struct Node *prev;
} Node;

// Prototipos de funciones
Node *create_node(int value, int range);
void push(Node **top, int value, int range);
int pop(Node **top);
int is_empty(Node *top);
void free_stack(Node **top);
void ft_split_list(char *input, Node **top);
void print_operations(int *operations, int count);
void swap(Node **stack);
void rotate(Node **stack);
void reverse_rotate(Node **stack);
void pushAtoB(Node **stack_a, Node **stack_b);
void initial_Phase(Node **stack_a, int *argv, int size);
void phase1(Node **stack_a, Node **stack_b, int size);
void phase2(Node **stack_a, Node **stack_b);
void phase3(Node **stack_a);

// Función para crear un nuevo nodo
Node *create_node(int value, int range)


// Función para insertar un nodo en la parte superior del stack (ver diferencia con el otro push)
void push(Node **top, int value, int range)

// Función para eliminar y devolver el valor del nodo superior del stack(ver diferencia con el otro pop)
int pop(Node **top)


// Función para comprobar si el stack está vacío
int is_empty(Node *top)


// Función para liberar la memoria 
void free_stack(Node **top)


// Función para dividir una cadena en tokens y agregar los valores al stack(ver diferencia con el new_split)
void ft_split_list(char *input, Node **top)


// Función para imprimir las operaciones (ver diferencia con el otro print_operations)
void print_operations(int *operations, int count)


// Funciones de las operaciones (swap, rotate, reverseRotate, pushAtoB)
------------------------------------------------------------------------------
// Función para la fase inicial del algoritmo
void initial_phase(Node **stack_a, int *argv, int size)

    // Hacer el análisis sintáctico de los argv
    // Crear el stack A y añadir el rango a cada nodo

// Función para la fase 1 del algoritmo
void phase1(Node **stack_a, Node **stack_b, int size) 
    // Dividir la lista en 3 y poner los 2 tercios más pequeños en el stack B
    // Repetir la operación hasta que sólo queden 3 números en el stack A
    // Ordenar estos 3 números utilizando un algoritmo específico --> sort_list_simple(?)


// Función para la fase 2 del algoritmo
void phase2(Node **stack_a, Node **stack_b) 
    // Escanear B y buscar el número que tarde menos movimientos en ser empujado a A --> funcion de coste
    // Realizar la operación y repetirla hasta que B esté vacío.


// Función para la fase 3 del algoritmo
void phase3(Node **stack_a) 
    // Si es necesario, girar la pila A para finalizar el orden correcto --> sort_list_simple(?)
    // El más corto entre ra o rra --> sort_list_simple(?)
    // Optimizar las rotaciones dobles rr y rrr
   
