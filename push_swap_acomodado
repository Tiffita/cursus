# include "libft/libft.h"
# include <stddef.h>
# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include <limits.h> (se puede usar para INT MIN MAX)


// Prototipos de funciones (ya terminado)
long		check_input(char *av);
void		error_show(t_stack **stack_a, t_stack **stack_b);
void		free_stack(t_stack **stack);
long int	new_atoi(const char *str);
void		get_index(t_stack *stack_a, int stack_size);
t_stack		*stack_new(int value);
void		stack_add(t_stack **stack, t_stack *new);
t_stack		*get_bottom(t_stack *stack);
int			get_size(t_stack	*stack);
int			check_sorted(t_stack *stack);
void		do_sort_three(t_stack **stack);
void		do_sa(t_stack **stack_a);
void		do_sb(t_stack **stack_b);
void		do_ss(t_stack **stack_a, t_stack **stack_b);
void		ft_putstr(char *str);
void		do_ra(t_stack **stack_a);
void		do_rb(t_stack **stack_b);
void		do_rr(t_stack **stack_a, t_stack **stack_b);
t_stack		*check_bottom(t_stack *stack);
void		do_rra(t_stack **stack_a);
void		do_rrb(t_stack **stack_b);
void		do_rrr(t_stack **stack_a, t_stack **stack_b);
void		do_pa(t_stack **stack_a, t_stack **stack_b);
void		do_pb(t_stack **stack_a, t_stack **stack_b);
void		do_sort(t_stack **stack_a, t_stack **stack_b);
void		give_target_position(t_stack **stack_a, t_stack **stack_b);
void		cost(t_stack **stack_a, t_stack **stack_b);
void		check_cheapest_move(t_stack **stack_a, t_stack **stack_b);
int			get_abs(int nb);
void		do_move(t_stack **a, t_stack **b, int cost_a, int cost_b);
int			check_lowest_index(t_stack **stack);
char		**ft_split(char const *s, char c);
void		parsing(char *av, t_stack **stack_a);
int			check_is_dup(t_stack *to_check);
size_t		ft_strlen(const char *s);




// Funciones de las operaciones (swap, rotate, reverseRotate, pushAtoB)

// Función para la fase inicial del algoritmo
void initial_phase(Node **stack_a, int *argv, int size)
{
    // Hacer el análisis sintáctico de los argv
    // Crear el stack A y añadir el rango a cada nodo
   
}

// Función para la fase 1 del algoritmo
void phase1(Node **stack_a, Node **stack_b, int size) {
    // Dividir la lista en 3 y poner los 2 tercios más pequeños en la pila B
    // Repetir la operación hasta que sólo queden 3 números en la pila A
    // Ordenar estos 3 números utilizando un algoritmo específico
}

// Función para la fase 2 del algoritmo
void phase2(Node **stack_a, Node **stack_b) {
    // Escanear B y buscar el número que tarde menos movimientos en ser empujado a A
    // Realizar la operación y repetirla hasta que B esté vacío
}

// Función para la fase 3 del algoritmo
void phase3(Node **stack_a) {
    // Si es necesario, girar la pila A para finalizar el orden correcto
    // El más corto entre ra o rra
    // Optimizar las rotaciones dobles rr y rrr
}



   
