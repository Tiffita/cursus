#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <limits.h> necesitos numeros min y max

// definir listas, revisar listas dobles ?
typedef struct Node {
    int data;
    struct Node *next;
} Node;

// prototipos ( ver bien despues)
Node *createNode(int value);
void push(Node **top, int value);
int pop(Node **top);
int isEmpty(Node *top);
void freeStack(Node **top);
void split(char *input, Node **top) // modificar split , const char ?)
void printOperations(int *operations, int count);

// hacer instrucciones combinarlas con un ft_printf ? o write directo?
void swap(Node **stack);
void rotate(Node **stack);
void reverseRotate(Node **stack);
void pushAtoB(Node **stack_a, Node **stack_b);


// Manejo de errores: check si  av es < 2
// check is es == 2, seria una string con "", usar ft_split y enviar arguemntos a la lista
// Si es > a 2, es una lista de argumentos, usar ft_atoi y enviar a la lista para crear nodos.
// hacer funcion para check duplicados, hacerla antes de recibir argumentos o despues y checkear los nodos?

// parseo
t_stack	*ft_parseo(int argc, char **argv)
{
	t_stack	*stack_a;
	int		i;
	int		j;

	i = 1;
	stack_a = NULL;
	if (argc < 2)
		ft_error();
	else if (argc == 2)
		stack_a = FUNCION PARSEO DE STRING(argv);
	else
	{
		FUNCION PARA LISTA DE ARGUMENTOS(argv, &stack_a);
	}
	return (stack_a);
}

//funcion para checkear errores:

int	check_args(char **argv)
{
	int i;
	int j;

	i = 1;
	while (argv[i])
	{
		j = 0;
		while ((argv[i][j]) != '\0')
		{
			if (ft_isalpha(argv[i][j]))
				ft_error();
			j++;
		}
		i++;
	}
	if (!ft_check_error(argv, 1, 0))
		return (false);
	return (true);
}

// funcion para checkear errores: ft_check_error
int	ft_check_error(char **argv, int i, int j)
{
	while (argv[i])
	{
		j = 0;
		while ((argv[i][j] != '\0'))
		{
			if (ft_sign(argv[i][j]))
			{
				j++;
				if (!ft_isdigit(argv[i][j]))
					return (false);
			}
			else if (ft_isdigit(argv[i][j]))
			{
				j++;
				if (argv[i][j] == '\0')
					break ;
				if (!ft_isdigit(argv[i][j]) && !ft_isspace(argv[i][j]))
					return (false);
			}
			j++;
		}
		i++;
	}
	return (true);
}

// funcion ft_sign
int	ft_sign(int c)
{
	if (c == '+' || c == '-')
		return (1);
	return (0);
}

//funcion ft_isspace
int	ft_isspace(int c)
{
	if (c == ' ')
		return (1);
	return (0);
}

//funcion de error mensaje:
void	ft_error(void)
{	
	write (2, "Error\n", 6);
	exit(1);
}

int main(int argc, char *argv[]) {
   
    Node *stack_a = NULL;

   
    if (argc != 2) {
        ft_printf("Error\n");
        return (1);
    }

    // iniciar stack a , modificar split
    ft_split(argv[1], &stack_a);

    // actualizaciones del stack
    int *operations = (int*)malloc(sizeof(int) * 1000);
    int opCount = 0;

    //  algoritmo a hacer, llamar a funcion del algoritmo
    

    // ft_printf de instrucciones
    printOperations(operations, opCount);

    // hacer los free del split en caso de que diferentes av o string
    int i = 0;
    while (argv[i]) 
    {
        free(argv[i]);
        i++;
    }
    free(argv); 
    freeStack(&stack_a);
    free(operations);

    return (0);
}

// crear nuevo nodo
Node *createNode(int value) {
    Node *newNode = (Node*)malloc(sizeof(Node));
    if (newNode) {
        newNode->data = value;
        newNode->next = NULL;
    }
    return (newNode);
}

// pushear un nodo al stack
void push(Node **top, int value) {
    Node *newNode = createNode(value);
    if (newNode) {
        newNode->next = *top;
        *top = newNode;
    }
}

// popear un nodo del stack
int pop(Node **top) {
    if (isEmpty(*top)) {
        printf("Error: Stack is empty\n");
        return INT_MIN;
    }
    int data = (*top)->data;
    Node *temp = *top;
    *top = (*top)->next;
    free(temp);
    return data;
}

//  ver si el stack esta vacio
int isEmpty(Node *top) {
    return top == NULL ? 1 : 0;
}

// hacer free del stack
void freeStack(Node **top) {
    while (!isEmpty(*top)) {
        pop(top);
    }
}

// split para recibir los av
void split(char *input, Node **top) {
    char *token = ft_split(input, " ");
    while (token != NULL) {
        push(top, ft_atoi(token));
        token = ft_split(NULL, " ");
    }
}

// ft_printf de las instrucciones
void printOperations(int *operations, int count) {
    ft_printf("List of operations:\n");
    i = 0;
    while (i < count)
    }
       i++;
       ft_printf("%d ", operations[i]);
    }
    ft_printf("\n");
}
void printOperations(Node *operations) {
    while (operations != NULL) {
        char buffer[20];  
        ft_itoa(operations->data, buffer, 10);  
        write(1, buffer, ft_strlen(buffer));  
        write(1, " ", 1);  
        operations = operations->next;  
    }
    write(1, "\n", 1);  
}

// instrucciones
void swap(Node **stack) {
    
}

void rotate(Node **stack) {
   
}

void reverseRotate(Node **stack) {
    
}

void pushAtoB(Node **stack_a, Node **stack_b) {
   
}
